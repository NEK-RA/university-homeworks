#include <iostream>
#include <string>
#include <limits>
#include "utils.h"
using namespace std;

/*
1) Определить переменную целого типа, присвоить ей значение,
используя константу в шестнадцатеричной системе счисления.
Разработать функцию, которое установит заданные в задании биты
исходного значения переменной в значение 1, используя
соответствующую маску и поразрядную операцию. 
> С 9-ого четыре слева
*/
void task1(){
  int c = 0xABCDEF;
  int mask = 0b1111 << 9;
  printNameDecBin("const", c);
  printNameDecBin("mask", mask);
  printNameDecBin("const | mask", c | mask);
}
/*
2) Разработать функцию, которая обнуляет заданные в задании биты
исходного значения целочисленной переменной, введенной
пользователем, используя соответствующую маску и поразрядную
операцию. 
> 17-ий, 15-ый, 1-ый
*/

void task2(int num = 0b11111111111111111111){
  int mask = ~((0b101 << 15) + 1);
  printNameDecBin("num", num);
  printNameDecBin("mask", mask);
  printNameDecBin("num & mask", num & mask);
}

/*
3) Разработать функцию, которая умножает значение целочисленной
переменной, введенной пользователем, на множитель, используя
соответствующую поразрядную операцию. 
> 1024 
*/
int task3(int num){
  return num << 10;
}

/*
4) Разработать функцию, которая делит значение целочисленной
переменной, введенной пользователем, на делитель, используя
соответствующую поразрядную операцию. 
> 1024
*/

int task4(int num){
  return num >> 10;
}

/*
5)Разработать функцию, реализующую задание, в которой
используются только поразрядные операции. В выражении
используется маска – переменная. Маска инициализируется единицей
в младшем разряде (маска 1) или единицей в старшем разряде (маска 2). 
Изменяемое число и n вводится с клавиатуры. 
> Обнулить n-ый бит, используя маску 1 
*/
void task5(int num = ~0, int n = 0){
  int mask1 = 1;
  n = n % 32;
  // int mask2 = 1 << 30;
  printNameDecBin("num",num);
  printNameDecBin("mask 1", mask1);
  // printNameDecBin("mask 2", mask2);
  printNameDecBin("num & ~(mask1 << " + to_string(n) + ")", num & ~(mask1 << n));
}

int main(){
  IntInput tmp;
  int choice = -1;
  int t5n = 0, t5num = 0;
  cout << "Работа <<Битовые операции>>, Вариант 15" << endl;
  string menu = "Выберите действие:\n"
  "1. Установить биты в 1 для 16-чной константы\n"
  "2. Ввод числа и обнуление битов\n"
  "3. Умножить на число\n"
  "4. Разделить на число\n"
  "5. Ввести число, обнулить n-й бит маской 1\n"
  "0. Выход";

  while(choice != 0){
    tmp = readInt(menu,0,5);
    choice = tmp.num;

    switch(choice){
      case 1:
        cout << "Task 1:\n"
        "Определить переменную целого типа через конст. в 16-чной СС.\n"
        "Установить в 1 следующие биты числа: С 9-ого четыре слева" << endl;
        task1();
        cout << string(60, '-') << endl;
        break;

      case 2:
        cout << "Task 2:\n"
        "Ввести число с клавиатуры\n"
        "Обнулить следующие биты: 17-ий, 15-ый, 1-ый" << endl;
        task2(readAnyInt("Введите число: ").num);
        cout << string(60, '-') << endl;
        break;
      
      case 3:
        cout << "Task 3:\n"
        "Ввести число с клавиатуры\n"
        "Умножить число на множитель: 1024" << endl;
        tmp = readAnyInt("Введите число для умножения: ");
        printNameDecBin("до умножения", tmp.num);
        printNameDecBin("после умножения", task3(tmp.num));
        cout << string(60, '-') << endl;
        break;
      
      case 4:
        cout << "Task 4:\n"
        "Ввести число с клавиатуры\n"
        "Разделить число на делитель: 1024" << endl;
        tmp = readAnyInt("Введите число для деления: ");
        printNameDecBin("до деления", tmp.num);
        printNameDecBin("после деления", task4(tmp.num));
        cout << string(60, '-') << endl;
        break;
      
      case 5:
        cout << "Task 5:\n"
        "Ввести число с клавиатуры\n"
        "Ввести число n - номер обнуляемого бита\n"
        "Обнулить n-й бит с помощью маски 1 (=0b1)" << endl;

        task5(readAnyInt("Введите число: ").num, readAnyInt("Введите номер обнуляемого бита: ").num);
        cout << string(60, '-') << endl;
        break;

      default:
        cout << "Выход..." << endl;
        break;
    }
  }
  return 0;
}
